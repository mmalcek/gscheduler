syntax = "proto3";

option go_package = "github.com/mmalcek/gscheduler/proto/go";

package gscheduler;

message Request {
  string msg = 1;
}

message List {
  repeated string data = 1;
}

message File {
  bytes content = 1;
}

message Empty {}

message Task {
  string name = 1;              // Task Name [a-zA-Z0-9_ ] max 128chars
  string description = 2;       // Task Description [a-zA-Z0-9_ ] max 128chars
  map<string,string> tags = 3;  // Tags that can be used for more detailed task description (key:value, saved also to logFile)
  string schedule = 4;          // Task Schedule cron expression "* * * * *"
  int64 timeout = 5;            // Task Timeout in seconds (must be > 1)
  string app = 6;               // Task App name (must be in apps list gscheduler config.yaml)
  repeated string args = 7;     // Task App arguments 
  string next_task = 8;         // Task UUID of next task to run after this task finished
  string uuid = 9;              // Task UUID (autogenerated on create)
  int64 cron_id = 10;           // Task CronID - interal scheduler ID controlled by application (if 0 task is not scheduled, controlled by app)
  bool enabled = 11;            // Task Enabled (controlled by app)
}

message Tasks {
  repeated Task tasks = 1; // Task list
}

message TaskUUID  {
    string uuid = 1;  // Task UUID
    bool force = 2;   // Force task stop 
}

message Status {
    string uuid = 1;    // Task UUID
    string message = 2; // Task Status Message
    string error = 3;   // Task Error Message
}

message ExecStatus { // response from single commad execution
  string stderr = 1;    // stderr output
  string stdout = 2;    // stdout output
  int64 exit_code = 3;  // exit code
}

message TaskLog {
  string name = 1;              // task name
  map<string,string> tags = 2;  // Tags that can be used for more detailed task description (key:value, saved also to logFile)
  string uuid = 3;              // task uuid autogenerated by scheduler
  string type = 4;              // info, stdout, stderr, exitStatus, error
  string message = 5;           // task log message
  int64 timestamp = 6;          // current timestamp
}

message Stop {
  bool force = 1; // stop type
}

service TaskManager {
  rpc AppsList (Empty) returns (List) {}                      // List apps that are available for scheduler (config.yaml)
  rpc TaskCreate (Task) returns (Status) {}                // Create new task
  rpc TaskUpdate (Task) returns (Status) {}                // Update existing task
  rpc TaskDelete (TaskUUID) returns (Status) {}            // Delete existing task
  rpc TaskStop (TaskUUID) returns (Status) {}              // Stop existing task (force true/false)
  rpc TaskStart (TaskUUID) returns (Status) {}             // Start existing task
  rpc TaskRun (TaskUUID) returns (Status) {}               // Run task manually
  rpc TasksList (Empty) returns (Tasks) {}                 // List all tasks
  rpc SchedulerStop (Stop) returns (Status) {}             // Stop scheduler (force true/false)
  rpc SchedulerStart (Empty) returns (Status) {}           // Start scheduler
  rpc SchedulerWatch (Empty) returns (stream TaskLog) {}      // stream of task logs
  rpc SchedulerRunningTasks (Empty) returns (List) {} // array of running tasks uuids
  rpc ExecCmd (Task) returns (ExecStatus) {}               // Execute command without creating task (uses app,args,timeout only)
  rpc LogList (Empty) returns (List) {}                       // List of existing log files
  rpc LogGet(Request) returns (File) {}                       // Return log file
}
